BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

struct ll
{
    int data;
    struct ll* next;
};

struct ll *head = NULL;
int top = -1;

struct ll* addtoll(int value, struct ll* ptr){
    struct ll* node = malloc(sizeof(struct ll));
    node->data = value;

    if (ptr == NULL)
    {
        node->next = NULL;
        ptr = node;
        return ptr;
    }
    else if (ptr != NULL)
    {
        node->next = ptr;
        ptr = node;
        return ptr;
    }    
}

struct ll* deletefromll(struct ll* ptr){
    struct ll* temp = ptr->next;
    printf("The element pop is %d\n",ptr->data);
    free(ptr);
    ptr = temp;
    return ptr;
}

void displayll(struct ll* ptr){
    if (ptr==NULL)
    {
        printf("Stack is empty. No data to display\n");
    }
    else
    {
        printf("Data in the Linked List\n");
        while (ptr!=NULL)
        {
            printf("%d\n",ptr->data);
            ptr = ptr->next;
        }
    }
}

void push(struct ll* ptr){
    int value;
    printf("Enter value to be added to stack ");
    scanf("%d",&value);
    ptr = addtoll(value,ptr);
    head = ptr;
    top++;
}

void pop(struct ll* ptr){
    if (ptr==NULL)
    {
        printf("There is no element to pop\n");
    }
    else
    {
        head = deletefromll(ptr);
        top--;
    }
}

void peek(struct ll* ptr){
    if (top==-1)
    {
        printf("UNDERFLOW\n");
    }
    else
    {
        printf("The peek element is %d\n",ptr->data);
    }
}

bool isEmpyty(struct ll* ptr){
    if (ptr==NULL)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int sizeofstack(struct ll* ptr){
    if (ptr==NULL)
    {
        return 0;
    }
    else
    {
        int counter = 0;
        while (ptr!=NULL)
        {
            ptr = ptr->next;
            counter++;
        }
        return counter;
    }
}

void main(){
    int choice;
    printf("Stack Operations\n");
    printf("1. PUSH\n");
    printf("2. DISPLAY\n");
    printf("3. POP\n");
    printf("4. PEEK\n");
    printf("5. ISEMPTY\n");
    printf("6. SIZE OF STACK\n");
    printf("7. EXIT\n");
    printf("Enter your choice number\n");
    scanf("%d",&choice);

    switch (choice)
    {
    case 1:
        push(head);
        main();
    case 2:
        displayll(head);
        main();
    case 3:
        pop(head);
        main();
    case 4:
        peek(head);
        main();
    case 5:
        if (isEmpyty(head))
        {
            printf("True\n");
        }
        else
        {
            printf("False\n");
        }
        main(); 
    case 6:
        printf("The size of stack is %d\n",sizeofstack(head));
        main();           
    case 7:
        exit(0);
        break;    
    default:
        printf("Wrong Choice! Enter a valid number\n");
        main();
    }
}
UPDATED

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

struct ll
{
    int data;
    struct ll* next;
};

struct ll *head = NULL;
int top = -1;

struct ll* addtoll(int value, struct ll* ptr){
    struct ll* node = malloc(sizeof(struct ll));
    node->data = value;

    if (ptr == NULL)
    {
        node->next = NULL;
        ptr = node;
        return ptr;
    }
    else if (ptr != NULL)
    {
        while (ptr!=NULL)
        {
            if (ptr->next==NULL)
            {
                ptr->next = node;
                node->next = NULL;
                return head;
            }
            ptr = ptr->next;
        }
    }    
}

struct ll* deletefromll(struct ll* ptr){
    struct ll* temp = ptr->next;
    printf("The element dequeue is %d\n",ptr->data);
    free(ptr);
    ptr = temp;
    return ptr;
}

void displayll(struct ll* ptr){
    if (ptr==NULL)
    {
        printf("Stack is empty. No data to display\n");
    }
    else
    {
        printf("Data in the Linked List\n");
        while (ptr!=NULL)
        {
            printf("%d\n",ptr->data);
            ptr = ptr->next;
        }
    }
}

void enqueue(struct ll* ptr){
    int value;
    printf("Enter value to be added to stack ");
    scanf("%d",&value);
    ptr = addtoll(value,ptr);
    head = ptr;
    top++;
}

void dequeue(struct ll* ptr){
    if (ptr==NULL)
    {
        printf("There is no element to pop\n");
    }
    else
    {
        head = deletefromll(ptr);
        top--;
    }
}

void peek(struct ll* ptr){
    if (top==-1)
    {
        printf("UNDERFLOW\n");
    }
    else
    {
        printf("The peek element is %d\n",ptr->data);
    }
}

bool isNULL(struct ll* ptr){
    if (ptr==NULL)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int sizeofqueue(struct ll* ptr){
    if (ptr==NULL)
    {
        return 0;
    }
    else
    {
        int counter = 0;
        while (ptr!=NULL)
        {
            ptr = ptr->next;
            counter++;
        }
        return counter;
    }
}

int search(struct ll* ptr){
    if (ptr==NULL)
    {
        printf("Queue is empty. Search is not possible.");
        return 0;
    }
    else
    {
        int i, key;
        int count = sizeofqueue(head);
        printf("Enter element to search in linked list: ");
        scanf("%d",&key);
        for ( i = 1; i <= count; i++)
        {
            if (ptr->data==key)
            {
                printf("%d ELEMENT FOUND IN LINKED LIST AT POSITION %d\n",key,i);
                break;
            }
            else if (i==count && ptr->next==NULL)
            {
                printf("ELEMENT NOT FOUND\n");
            }
            ptr = ptr->next;
        }
    }
}

void main(){
    int choice;
    printf("Stack Operations\n");
    printf("1. ENQUEUE\n");
    printf("2. DISPLAY\n");
    printf("3. DEQUEUE\n");
    printf("4. PEEK\n");
    printf("5. ISNULL\n");
    printf("6. SIZE OF QUEUE\n");
    printf("7. SEARCH\n");
    printf("8. EXIT\n");
    printf("Enter your choice number\n");
    scanf("%d",&choice);

    switch (choice)
    {
    case 1:
        enqueue(head);
        main();
    case 2:
        displayll(head);
        main();
    case 3:
        dequeue(head);
        main();
    case 4:
        peek(head);
        main();
    case 5:
        if (isNULL(head))
        {
            printf("True\n");
        }
        else
        {
            printf("False\n");
        }
        main(); 
    case 6:
        printf("The size of Queue is %d\n",sizeofqueue(head));
        main(); 
    case 7:
        search(head);
        main();              
    case 8:
        exit(0);
        break;    
    default:
        printf("Wrong Choice! Enter a valid number\n");
        main();
    }
}
--------------------QUEUE USING ARRAY-----------------------------
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

int front = -1, rear = -1; 
int arraysize = 10;
int arr[10];

void enqueue(){
    if (rear == arraysize-1)
    {
        printf("\nOVERFLOW ! Queue is already full.");
        return;
    }
    else{
        if (front==-1 && rear==-1)
        {
            int value;
            printf("\nEnter data to be added to the queue: ");
            scanf("%d",&value);
            front = rear = 0;
            arr[rear] = value;
            return;
        }
        else
        {
            int value;
            printf("\nEnter data to be added to the queue: ");
            scanf("%d",&value);
            rear+=1;
            arr[rear] = value;
            return;
        }
    }
}

void dequeue(){
    if (front==-1 || front>rear)
    {
        printf("\nUNDERFLOW ! Queue is empty");
    }
    else
    {
        if (front==rear)
        {
            printf("\nDequeue item is %d",arr[front]);
            front = rear = -1;
        }
        else
        {
            printf("\nDequeue item is %d",arr[front]);
            front+=1;
        }
    }
}

void frontval(){
    if (front==-1)
    {
        printf("\nQueue is empty!");
    }
    else
    {
        printf("\nThe front element is %d",arr[front]);
    }
}

void display(){
    if (front==-1)
    {
        printf("\nQueue is empty !");
    }
    else
    {
        int i = front;
        while(i <= rear)
        {
            printf("\n%d",arr[i]);
            i++;
        }
    }
}

void main(){
    printf("1.ENQUEUE\n2.DEQUEUE\n3.FRONT\n4.DISPLAY\n5.EXIT");
    while (1)
    {
        int choice;
        printf("\nEnter your choice: ");
        scanf("%d",&choice);

        switch (choice)
        {
        case 1:
            enqueue();
            break;
        
        case 2:
            dequeue();
            break;

        case 3:
            frontval();
            break;

        case 4:
            display();
            break;

        case 5:
            exit(0);
            break;          

        default:
            printf("\nWrong choice. Enter choice again");
            break;
        }   
    }
}


BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB



https://github.com/ash-ok13/dsa
https://github.com/NoobieUs37/ds_lab_programs





